// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Product /> should render as expected when the favorite list is not active 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [MockFunction],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(Product)
    hasFavorites={false}
    product={
      Object {
        "availability": Object {
          "state": "ok",
          "text": "Lorem Ipsum",
        },
        "featuredImageUrl": "https://cdn.acme.com/kitten.jpg",
        "flags": Object {
          "hasChildren": true,
          "hasVariants": false,
        },
        "id": "1337",
        "name": "A shiny product",
        "price": Object {
          "currency": "EUR",
          "discount": 0,
          "info": "",
          "msrp": 0,
          "unitPrice": 5,
          "unitPriceMin": 0,
          "unitPriceStriked": 0,
        },
        "stock": Object {
          "ignoreQuantity": false,
          "info": "Info",
          "maxOrderQuantity": 1000,
          "minOrderQuantity": 1,
          "orderable": true,
          "quantity": 4,
        },
      }
    }
  >
    <Product
      addToCartButtonProps={
        Object {
          "isDisabled": false,
          "isOrderable": true,
        }
      }
      handleAddToCart={[Function]}
      hasFavorites={false}
      isFavorite={true}
      product={
        Object {
          "availability": Object {
            "state": "ok",
            "text": "Lorem Ipsum",
          },
          "featuredImageUrl": "https://cdn.acme.com/kitten.jpg",
          "flags": Object {
            "hasChildren": true,
            "hasVariants": false,
          },
          "id": "1337",
          "name": "A shiny product",
          "price": Object {
            "currency": "EUR",
            "discount": 0,
            "info": "",
            "msrp": 0,
            "unitPrice": 5,
            "unitPriceMin": 0,
            "unitPriceStriked": 0,
          },
          "stock": Object {
            "ignoreQuantity": false,
            "info": "Info",
            "maxOrderQuantity": 1000,
            "minOrderQuantity": 1,
            "orderable": true,
            "quantity": 4,
          },
        }
      }
      renderFlatButtons={false}
    >
      <Grid
        className=""
        component="ul"
        wrap={false}
      >
        <ul
          className=" css-h7r55a"
        >
          <GridItem
            className="css-sg184b"
            component="li"
            grow={0}
            shrink={0}
          >
            <li
              className="css-sg184b css-1l9a57c"
            >
              <Image
                alt="A shiny product"
                animating={true}
                backgroundColor="#f2f2f2"
                className=""
                forcePlaceholder={false}
                highestResolutionLoaded={[Function]}
                itemProp="image"
                onError={null}
                onLoad={null}
                ratio={null}
                resolutions={
                  Array [
                    Object {
                      "blur": 2,
                      "height": 50,
                      "width": 50,
                    },
                    Object {
                      "height": 440,
                      "width": 440,
                    },
                  ]
                }
                src="https://cdn.acme.com/kitten.jpg"
                transition={null}
              >
                <div
                  className="css-326p2s "
                />
              </Image>
            </li>
          </GridItem>
          <GridItem
            className="css-nil"
            component="li"
            grow={4}
            shrink={1}
          >
            <li
              className="css-nil css-ke56yp"
            >
              <Ellipsis
                className="css-ud99sa"
                ellipsis="..."
                rows={3}
              >
                <Dotdotdot
                  clamp={3}
                  className="css-ud99sa"
                  ellipsis="..."
                  tagName="div"
                  truncationChar="â€¦"
                  useNativeClamp={true}
                >
                  <div
                    className="css-ud99sa"
                  >
                    A shiny product
                  </div>
                </Dotdotdot>
              </Ellipsis>
              <Availability
                className="css-117ocmm"
                showWhenAvailable={true}
                state="ok"
                text="Lorem Ipsum"
              >
                <div
                  className="css-117ocmm css-1ixzglu"
                  data-test-id="availabilityText: Lorem Ipsum"
                >
                  Lorem Ipsum
                </div>
              </Availability>
            </li>
          </GridItem>
          <GridItem
            className="css-1onmrls"
            component="li"
            grow={0}
            shrink={1}
          >
            <li
              className="css-1onmrls"
            >
              <AddToCartPicker
                buttonProps={
                  Object {
                    "isDisabled": false,
                    "isOrderable": true,
                    "noShadow": false,
                    "type": "grouped",
                  }
                }
                clickDelay={150}
                handleAddToCart={[Function]}
                productId="1337"
                stock={
                  Object {
                    "ignoreQuantity": false,
                    "info": "Info",
                    "maxOrderQuantity": 1000,
                    "minOrderQuantity": 1,
                    "orderable": true,
                    "quantity": 4,
                  }
                }
              >
                <Picker
                  buttonComponent={[Function]}
                  buttonProps={
                    Object {
                      "addedQuantity": 0,
                      "className": null,
                      "handleAddToCart": [Function],
                      "hasLoading": true,
                      "isDisabled": false,
                      "isLoading": false,
                      "isOrderable": true,
                      "noShadow": false,
                      "type": "grouped",
                    }
                  }
                  className="css-ibd9un"
                  disabled={false}
                  duration={300}
                  isOpen={false}
                  items={
                    Array [
                      Object {
                        "label": "1",
                        "value": 1,
                      },
                      Object {
                        "label": "2",
                        "value": 2,
                      },
                      Object {
                        "label": "3",
                        "value": 3,
                      },
                      Object {
                        "label": "4",
                        "value": 4,
                      },
                    ]
                  }
                  label=""
                  listComponent={[Function]}
                  modalComponent={[Function]}
                  onChange={[Function]}
                  onClose={[Function]}
                  placeholder="Pick ..."
                  value={null}
                >
                  <div
                    className="css-ibd9un"
                  >
                    <PickerAddToCartButton
                      addedQuantity={0}
                      className={null}
                      disabled={false}
                      handleAddToCart={[Function]}
                      hasLoading={true}
                      isDisabled={false}
                      isLoading={false}
                      isOrderable={true}
                      label="Pick ..."
                      noShadow={false}
                      openList={[Function]}
                      type="grouped"
                      value=""
                    >
                      <button
                        data-test-id="addToCartButton"
                        onClick={[Function]}
                      />
                    </PickerAddToCartButton>
                    <Portal
                      isOpened={true}
                      onClose={[Function]}
                      onOpen={[Function]}
                      onUpdate={[Function]}
                    />
                  </div>
                </Picker>
              </AddToCartPicker>
              <ProductPrice
                price={
                  Object {
                    "currency": "EUR",
                    "discount": 0,
                    "info": "",
                    "msrp": 0,
                    "unitPrice": 5,
                    "unitPriceMin": 0,
                    "unitPriceStriked": 0,
                  }
                }
                renderLine={false}
              >
                <div
                  className="css-nil"
                >
                  <Price
                    className="css-fisw11"
                    currency="EUR"
                    discounted={false}
                    fractions={true}
                    taxDisclaimer={false}
                    unitPrice={5}
                    unitPriceMin={0}
                  >
                    <div
                      className="css-izofhs css-fisw11"
                      data-test-id="minPrice: 0 price: 5 currency: EUR"
                    >
                      <FormatPrice
                        className=""
                        currency="EUR"
                        fractions={true}
                        price={5}
                      >
                        <span
                          className=""
                        >
                          p
                        </span>
                      </FormatPrice>
                    </div>
                  </Price>
                </div>
              </ProductPrice>
            </li>
          </GridItem>
        </ul>
      </Grid>
    </Product>
  </Connect(Product)>
</Provider>
`;

exports[`<Product /> should render as expected when the favorite list is not active 2`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [MockFunction],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(Product)
    hasFavorites={true}
    product={
      Object {
        "availability": Object {
          "state": "ok",
          "text": "Lorem Ipsum",
        },
        "featuredImageUrl": "https://cdn.acme.com/kitten.jpg",
        "flags": Object {
          "hasChildren": true,
          "hasVariants": false,
        },
        "id": "foo",
        "name": "A not orderable product",
        "price": Object {
          "currency": "EUR",
          "discount": 0,
          "info": "",
          "msrp": 0,
          "unitPrice": 5,
          "unitPriceMin": 0,
          "unitPriceStriked": 0,
        },
        "stock": Object {
          "ignoreQuantity": false,
          "info": "Info",
          "maxOrderQuantity": 1000,
          "minOrderQuantity": 1,
          "orderable": false,
          "quantity": 0,
        },
      }
    }
  >
    <Product
      addToCartButtonProps={
        Object {
          "isDisabled": true,
          "isOrderable": false,
        }
      }
      handleAddToCart={[Function]}
      hasFavorites={true}
      isFavorite={false}
      product={
        Object {
          "availability": Object {
            "state": "ok",
            "text": "Lorem Ipsum",
          },
          "featuredImageUrl": "https://cdn.acme.com/kitten.jpg",
          "flags": Object {
            "hasChildren": true,
            "hasVariants": false,
          },
          "id": "foo",
          "name": "A not orderable product",
          "price": Object {
            "currency": "EUR",
            "discount": 0,
            "info": "",
            "msrp": 0,
            "unitPrice": 5,
            "unitPriceMin": 0,
            "unitPriceStriked": 0,
          },
          "stock": Object {
            "ignoreQuantity": false,
            "info": "Info",
            "maxOrderQuantity": 1000,
            "minOrderQuantity": 1,
            "orderable": false,
            "quantity": 0,
          },
        }
      }
      renderFlatButtons={false}
    >
      <Grid
        className=""
        component="ul"
        wrap={false}
      >
        <ul
          className=" css-h7r55a"
        >
          <GridItem
            className="css-sg184b"
            component="li"
            grow={0}
            shrink={0}
          >
            <li
              className="css-sg184b css-1l9a57c"
            >
              <Image
                alt="A not orderable product"
                animating={true}
                backgroundColor="#f2f2f2"
                className=""
                forcePlaceholder={false}
                highestResolutionLoaded={[Function]}
                itemProp="image"
                onError={null}
                onLoad={null}
                ratio={null}
                resolutions={
                  Array [
                    Object {
                      "blur": 2,
                      "height": 50,
                      "width": 50,
                    },
                    Object {
                      "height": 440,
                      "width": 440,
                    },
                  ]
                }
                src="https://cdn.acme.com/kitten.jpg"
                transition={null}
              >
                <div
                  className="css-326p2s "
                />
              </Image>
            </li>
          </GridItem>
          <GridItem
            className="css-nil"
            component="li"
            grow={4}
            shrink={1}
          >
            <li
              className="css-nil css-ke56yp"
            >
              <Ellipsis
                className="css-ud99sa"
                ellipsis="..."
                rows={3}
              >
                <Dotdotdot
                  clamp={3}
                  className="css-ud99sa"
                  ellipsis="..."
                  tagName="div"
                  truncationChar="â€¦"
                  useNativeClamp={true}
                >
                  <div
                    className="css-ud99sa"
                  >
                    A not orderable product
                  </div>
                </Dotdotdot>
              </Ellipsis>
              <ProductPrice
                price={
                  Object {
                    "currency": "EUR",
                    "discount": 0,
                    "info": "",
                    "msrp": 0,
                    "unitPrice": 5,
                    "unitPriceMin": 0,
                    "unitPriceStriked": 0,
                  }
                }
                renderLine={true}
              >
                <div
                  className="css-1yymqrw"
                >
                  <Price
                    className="css-fisw11"
                    currency="EUR"
                    discounted={false}
                    fractions={true}
                    taxDisclaimer={false}
                    unitPrice={5}
                    unitPriceMin={0}
                  >
                    <div
                      className="css-izofhs css-fisw11"
                      data-test-id="minPrice: 0 price: 5 currency: EUR"
                    >
                      <FormatPrice
                        className=""
                        currency="EUR"
                        fractions={true}
                        price={5}
                      >
                        <span
                          className=""
                        >
                          p
                        </span>
                      </FormatPrice>
                    </div>
                  </Price>
                </div>
              </ProductPrice>
              <Availability
                className="css-117ocmm"
                showWhenAvailable={true}
                state="ok"
                text="Lorem Ipsum"
              >
                <div
                  className="css-117ocmm css-1ixzglu"
                  data-test-id="availabilityText: Lorem Ipsum"
                >
                  Lorem Ipsum
                </div>
              </Availability>
            </li>
          </GridItem>
          <GridItem
            className="css-1anng1p"
            component="li"
            grow={0}
            shrink={1}
          >
            <li
              className="css-1anng1p"
            >
              <AddToCartPicker
                buttonProps={
                  Object {
                    "isDisabled": true,
                    "isOrderable": false,
                    "noShadow": false,
                    "type": "grouped",
                  }
                }
                clickDelay={150}
                handleAddToCart={[Function]}
                productId="foo"
                stock={
                  Object {
                    "ignoreQuantity": false,
                    "info": "Info",
                    "maxOrderQuantity": 1000,
                    "minOrderQuantity": 1,
                    "orderable": false,
                    "quantity": 0,
                  }
                }
              >
                <Picker
                  buttonComponent={[Function]}
                  buttonProps={
                    Object {
                      "addedQuantity": 0,
                      "className": null,
                      "handleAddToCart": [Function],
                      "hasLoading": true,
                      "isDisabled": true,
                      "isLoading": false,
                      "isOrderable": false,
                      "noShadow": false,
                      "type": "grouped",
                    }
                  }
                  className="css-ibd9un"
                  disabled={false}
                  duration={300}
                  isOpen={false}
                  items={Array []}
                  label=""
                  listComponent={[Function]}
                  modalComponent={[Function]}
                  onChange={[Function]}
                  onClose={[Function]}
                  placeholder="Pick ..."
                  value={null}
                >
                  <div
                    className="css-ibd9un"
                  >
                    <PickerAddToCartButton
                      addedQuantity={0}
                      className={null}
                      disabled={false}
                      handleAddToCart={[Function]}
                      hasLoading={true}
                      isDisabled={true}
                      isLoading={false}
                      isOrderable={false}
                      label="Pick ..."
                      noShadow={false}
                      openList={[Function]}
                      type="grouped"
                      value=""
                    >
                      <button
                        data-test-id="addToCartButton"
                        onClick={[Function]}
                      />
                    </PickerAddToCartButton>
                    <Portal
                      isOpened={true}
                      onClose={[Function]}
                      onOpen={[Function]}
                      onUpdate={[Function]}
                    />
                  </div>
                </Picker>
              </AddToCartPicker>
              <Connect(FavoritesButton)
                active={false}
                className="css-1dps91a"
                noShadow={false}
                productId="foo"
                rippleClassName="css-1tdptiz"
              >
                <FavoritesButton
                  active={false}
                  addFavorites={[Function]}
                  className="css-1dps91a"
                  noShadow={false}
                  onRippleComplete={[Function]}
                  once={false}
                  productId="foo"
                  removeFavorites={[Function]}
                  removeThrottle={0}
                  removeWithRelatives={false}
                  rippleClassName="css-1tdptiz"
                />
              </Connect(FavoritesButton)>
            </li>
          </GridItem>
        </ul>
      </Grid>
    </Product>
  </Connect(Product)>
</Provider>
`;

exports[`<Product /> should render as expected with flat buttons 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [MockFunction],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(Product)
    hasFavorites={true}
    product={
      Object {
        "availability": Object {
          "state": "ok",
          "text": "Lorem Ipsum",
        },
        "featuredImageUrl": "https://cdn.acme.com/kitten.jpg",
        "flags": Object {
          "hasChildren": true,
          "hasVariants": false,
        },
        "id": "1337",
        "name": "A shiny product",
        "price": Object {
          "currency": "EUR",
          "discount": 0,
          "info": "",
          "msrp": 0,
          "unitPrice": 5,
          "unitPriceMin": 0,
          "unitPriceStriked": 0,
        },
        "stock": Object {
          "ignoreQuantity": false,
          "info": "Info",
          "maxOrderQuantity": 1000,
          "minOrderQuantity": 1,
          "orderable": true,
          "quantity": 4,
        },
      }
    }
    renderFlatButtons={true}
  >
    <Product
      addToCartButtonProps={
        Object {
          "isDisabled": false,
          "isOrderable": true,
        }
      }
      handleAddToCart={[Function]}
      hasFavorites={true}
      isFavorite={true}
      product={
        Object {
          "availability": Object {
            "state": "ok",
            "text": "Lorem Ipsum",
          },
          "featuredImageUrl": "https://cdn.acme.com/kitten.jpg",
          "flags": Object {
            "hasChildren": true,
            "hasVariants": false,
          },
          "id": "1337",
          "name": "A shiny product",
          "price": Object {
            "currency": "EUR",
            "discount": 0,
            "info": "",
            "msrp": 0,
            "unitPrice": 5,
            "unitPriceMin": 0,
            "unitPriceStriked": 0,
          },
          "stock": Object {
            "ignoreQuantity": false,
            "info": "Info",
            "maxOrderQuantity": 1000,
            "minOrderQuantity": 1,
            "orderable": true,
            "quantity": 4,
          },
        }
      }
      renderFlatButtons={true}
    >
      <Grid
        className=""
        component="ul"
        wrap={false}
      >
        <ul
          className=" css-h7r55a"
        >
          <GridItem
            className="css-sg184b"
            component="li"
            grow={0}
            shrink={0}
          >
            <li
              className="css-sg184b css-1l9a57c"
            >
              <Image
                alt="A shiny product"
                animating={true}
                backgroundColor="#f2f2f2"
                className=""
                forcePlaceholder={false}
                highestResolutionLoaded={[Function]}
                itemProp="image"
                onError={null}
                onLoad={null}
                ratio={null}
                resolutions={
                  Array [
                    Object {
                      "blur": 2,
                      "height": 50,
                      "width": 50,
                    },
                    Object {
                      "height": 440,
                      "width": 440,
                    },
                  ]
                }
                src="https://cdn.acme.com/kitten.jpg"
                transition={null}
              >
                <div
                  className="css-326p2s "
                />
              </Image>
            </li>
          </GridItem>
          <GridItem
            className="css-nil"
            component="li"
            grow={4}
            shrink={1}
          >
            <li
              className="css-nil css-ke56yp"
            >
              <Ellipsis
                className="css-ud99sa"
                ellipsis="..."
                rows={3}
              >
                <Dotdotdot
                  clamp={3}
                  className="css-ud99sa"
                  ellipsis="..."
                  tagName="div"
                  truncationChar="â€¦"
                  useNativeClamp={true}
                >
                  <div
                    className="css-ud99sa"
                  >
                    A shiny product
                  </div>
                </Dotdotdot>
              </Ellipsis>
              <ProductPrice
                price={
                  Object {
                    "currency": "EUR",
                    "discount": 0,
                    "info": "",
                    "msrp": 0,
                    "unitPrice": 5,
                    "unitPriceMin": 0,
                    "unitPriceStriked": 0,
                  }
                }
                renderLine={true}
              >
                <div
                  className="css-1yymqrw"
                >
                  <Price
                    className="css-fisw11"
                    currency="EUR"
                    discounted={false}
                    fractions={true}
                    taxDisclaimer={false}
                    unitPrice={5}
                    unitPriceMin={0}
                  >
                    <div
                      className="css-izofhs css-fisw11"
                      data-test-id="minPrice: 0 price: 5 currency: EUR"
                    >
                      <FormatPrice
                        className=""
                        currency="EUR"
                        fractions={true}
                        price={5}
                      >
                        <span
                          className=""
                        >
                          p
                        </span>
                      </FormatPrice>
                    </div>
                  </Price>
                </div>
              </ProductPrice>
              <Availability
                className="css-117ocmm"
                showWhenAvailable={true}
                state="ok"
                text="Lorem Ipsum"
              >
                <div
                  className="css-117ocmm css-1ixzglu"
                  data-test-id="availabilityText: Lorem Ipsum"
                >
                  Lorem Ipsum
                </div>
              </Availability>
            </li>
          </GridItem>
          <GridItem
            className="css-1anng1p"
            component="li"
            grow={0}
            shrink={1}
          >
            <li
              className="css-1anng1p"
            >
              <AddToCartPicker
                buttonProps={
                  Object {
                    "isDisabled": false,
                    "isOrderable": true,
                    "noShadow": true,
                    "type": "grouped",
                  }
                }
                clickDelay={150}
                handleAddToCart={[Function]}
                productId="1337"
                stock={
                  Object {
                    "ignoreQuantity": false,
                    "info": "Info",
                    "maxOrderQuantity": 1000,
                    "minOrderQuantity": 1,
                    "orderable": true,
                    "quantity": 4,
                  }
                }
              >
                <Picker
                  buttonComponent={[Function]}
                  buttonProps={
                    Object {
                      "addedQuantity": 0,
                      "className": "css-l6qlih",
                      "handleAddToCart": [Function],
                      "hasLoading": true,
                      "isDisabled": false,
                      "isLoading": false,
                      "isOrderable": true,
                      "noShadow": true,
                      "type": "grouped",
                    }
                  }
                  className="css-ibd9un"
                  disabled={false}
                  duration={300}
                  isOpen={false}
                  items={
                    Array [
                      Object {
                        "label": "1",
                        "value": 1,
                      },
                      Object {
                        "label": "2",
                        "value": 2,
                      },
                      Object {
                        "label": "3",
                        "value": 3,
                      },
                      Object {
                        "label": "4",
                        "value": 4,
                      },
                    ]
                  }
                  label=""
                  listComponent={[Function]}
                  modalComponent={[Function]}
                  onChange={[Function]}
                  onClose={[Function]}
                  placeholder="Pick ..."
                  value={null}
                >
                  <div
                    className="css-ibd9un"
                  >
                    <PickerAddToCartButton
                      addedQuantity={0}
                      className="css-l6qlih"
                      disabled={false}
                      handleAddToCart={[Function]}
                      hasLoading={true}
                      isDisabled={false}
                      isLoading={false}
                      isOrderable={true}
                      label="Pick ..."
                      noShadow={true}
                      openList={[Function]}
                      type="grouped"
                      value=""
                    >
                      <button
                        data-test-id="addToCartButton"
                        onClick={[Function]}
                      />
                    </PickerAddToCartButton>
                    <Portal
                      isOpened={true}
                      onClose={[Function]}
                      onOpen={[Function]}
                      onUpdate={[Function]}
                    />
                  </div>
                </Picker>
              </AddToCartPicker>
              <Connect(FavoritesButton)
                active={true}
                className="css-1dps91a"
                noShadow={true}
                productId="1337"
                rippleClassName="css-1tdptiz"
              >
                <FavoritesButton
                  active={true}
                  addFavorites={[Function]}
                  className="css-1dps91a"
                  noShadow={true}
                  onRippleComplete={[Function]}
                  once={false}
                  productId="1337"
                  removeFavorites={[Function]}
                  removeThrottle={0}
                  removeWithRelatives={false}
                  rippleClassName="css-1tdptiz"
                />
              </Connect(FavoritesButton)>
            </li>
          </GridItem>
        </ul>
      </Grid>
    </Product>
  </Connect(Product)>
</Provider>
`;

exports[`<Product /> should render as expected with regular buttons 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [MockFunction],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(Product)
    hasFavorites={true}
    product={
      Object {
        "availability": Object {
          "state": "ok",
          "text": "Lorem Ipsum",
        },
        "featuredImageUrl": "https://cdn.acme.com/kitten.jpg",
        "flags": Object {
          "hasChildren": true,
          "hasVariants": false,
        },
        "id": "1337",
        "name": "A shiny product",
        "price": Object {
          "currency": "EUR",
          "discount": 0,
          "info": "",
          "msrp": 0,
          "unitPrice": 5,
          "unitPriceMin": 0,
          "unitPriceStriked": 0,
        },
        "stock": Object {
          "ignoreQuantity": false,
          "info": "Info",
          "maxOrderQuantity": 1000,
          "minOrderQuantity": 1,
          "orderable": true,
          "quantity": 4,
        },
      }
    }
    renderFlatButtons={false}
  >
    <Product
      addToCartButtonProps={
        Object {
          "isDisabled": false,
          "isOrderable": true,
        }
      }
      handleAddToCart={[Function]}
      hasFavorites={true}
      isFavorite={true}
      product={
        Object {
          "availability": Object {
            "state": "ok",
            "text": "Lorem Ipsum",
          },
          "featuredImageUrl": "https://cdn.acme.com/kitten.jpg",
          "flags": Object {
            "hasChildren": true,
            "hasVariants": false,
          },
          "id": "1337",
          "name": "A shiny product",
          "price": Object {
            "currency": "EUR",
            "discount": 0,
            "info": "",
            "msrp": 0,
            "unitPrice": 5,
            "unitPriceMin": 0,
            "unitPriceStriked": 0,
          },
          "stock": Object {
            "ignoreQuantity": false,
            "info": "Info",
            "maxOrderQuantity": 1000,
            "minOrderQuantity": 1,
            "orderable": true,
            "quantity": 4,
          },
        }
      }
      renderFlatButtons={false}
    >
      <Grid
        className=""
        component="ul"
        wrap={false}
      >
        <ul
          className=" css-h7r55a"
        >
          <GridItem
            className="css-sg184b"
            component="li"
            grow={0}
            shrink={0}
          >
            <li
              className="css-sg184b css-1l9a57c"
            >
              <Image
                alt="A shiny product"
                animating={true}
                backgroundColor="#f2f2f2"
                className=""
                forcePlaceholder={false}
                highestResolutionLoaded={[Function]}
                itemProp="image"
                onError={null}
                onLoad={null}
                ratio={null}
                resolutions={
                  Array [
                    Object {
                      "blur": 2,
                      "height": 50,
                      "width": 50,
                    },
                    Object {
                      "height": 440,
                      "width": 440,
                    },
                  ]
                }
                src="https://cdn.acme.com/kitten.jpg"
                transition={null}
              >
                <div
                  className="css-326p2s "
                />
              </Image>
            </li>
          </GridItem>
          <GridItem
            className="css-nil"
            component="li"
            grow={4}
            shrink={1}
          >
            <li
              className="css-nil css-ke56yp"
            >
              <Ellipsis
                className="css-ud99sa"
                ellipsis="..."
                rows={3}
              >
                <Dotdotdot
                  clamp={3}
                  className="css-ud99sa"
                  ellipsis="..."
                  tagName="div"
                  truncationChar="â€¦"
                  useNativeClamp={true}
                >
                  <div
                    className="css-ud99sa"
                  >
                    A shiny product
                  </div>
                </Dotdotdot>
              </Ellipsis>
              <ProductPrice
                price={
                  Object {
                    "currency": "EUR",
                    "discount": 0,
                    "info": "",
                    "msrp": 0,
                    "unitPrice": 5,
                    "unitPriceMin": 0,
                    "unitPriceStriked": 0,
                  }
                }
                renderLine={true}
              >
                <div
                  className="css-1yymqrw"
                >
                  <Price
                    className="css-fisw11"
                    currency="EUR"
                    discounted={false}
                    fractions={true}
                    taxDisclaimer={false}
                    unitPrice={5}
                    unitPriceMin={0}
                  >
                    <div
                      className="css-izofhs css-fisw11"
                      data-test-id="minPrice: 0 price: 5 currency: EUR"
                    >
                      <FormatPrice
                        className=""
                        currency="EUR"
                        fractions={true}
                        price={5}
                      >
                        <span
                          className=""
                        >
                          p
                        </span>
                      </FormatPrice>
                    </div>
                  </Price>
                </div>
              </ProductPrice>
              <Availability
                className="css-117ocmm"
                showWhenAvailable={true}
                state="ok"
                text="Lorem Ipsum"
              >
                <div
                  className="css-117ocmm css-1ixzglu"
                  data-test-id="availabilityText: Lorem Ipsum"
                >
                  Lorem Ipsum
                </div>
              </Availability>
            </li>
          </GridItem>
          <GridItem
            className="css-1anng1p"
            component="li"
            grow={0}
            shrink={1}
          >
            <li
              className="css-1anng1p"
            >
              <AddToCartPicker
                buttonProps={
                  Object {
                    "isDisabled": false,
                    "isOrderable": true,
                    "noShadow": false,
                    "type": "grouped",
                  }
                }
                clickDelay={150}
                handleAddToCart={[Function]}
                productId="1337"
                stock={
                  Object {
                    "ignoreQuantity": false,
                    "info": "Info",
                    "maxOrderQuantity": 1000,
                    "minOrderQuantity": 1,
                    "orderable": true,
                    "quantity": 4,
                  }
                }
              >
                <Picker
                  buttonComponent={[Function]}
                  buttonProps={
                    Object {
                      "addedQuantity": 0,
                      "className": null,
                      "handleAddToCart": [Function],
                      "hasLoading": true,
                      "isDisabled": false,
                      "isLoading": false,
                      "isOrderable": true,
                      "noShadow": false,
                      "type": "grouped",
                    }
                  }
                  className="css-ibd9un"
                  disabled={false}
                  duration={300}
                  isOpen={false}
                  items={
                    Array [
                      Object {
                        "label": "1",
                        "value": 1,
                      },
                      Object {
                        "label": "2",
                        "value": 2,
                      },
                      Object {
                        "label": "3",
                        "value": 3,
                      },
                      Object {
                        "label": "4",
                        "value": 4,
                      },
                    ]
                  }
                  label=""
                  listComponent={[Function]}
                  modalComponent={[Function]}
                  onChange={[Function]}
                  onClose={[Function]}
                  placeholder="Pick ..."
                  value={null}
                >
                  <div
                    className="css-ibd9un"
                  >
                    <PickerAddToCartButton
                      addedQuantity={0}
                      className={null}
                      disabled={false}
                      handleAddToCart={[Function]}
                      hasLoading={true}
                      isDisabled={false}
                      isLoading={false}
                      isOrderable={true}
                      label="Pick ..."
                      noShadow={false}
                      openList={[Function]}
                      type="grouped"
                      value=""
                    >
                      <button
                        data-test-id="addToCartButton"
                        onClick={[Function]}
                      />
                    </PickerAddToCartButton>
                    <Portal
                      isOpened={true}
                      onClose={[Function]}
                      onOpen={[Function]}
                      onUpdate={[Function]}
                    />
                  </div>
                </Picker>
              </AddToCartPicker>
              <Connect(FavoritesButton)
                active={true}
                className="css-1dps91a"
                noShadow={false}
                productId="1337"
                rippleClassName="css-1tdptiz"
              >
                <FavoritesButton
                  active={true}
                  addFavorites={[Function]}
                  className="css-1dps91a"
                  noShadow={false}
                  onRippleComplete={[Function]}
                  once={false}
                  productId="1337"
                  removeFavorites={[Function]}
                  removeThrottle={0}
                  removeWithRelatives={false}
                  rippleClassName="css-1tdptiz"
                />
              </Connect(FavoritesButton)>
            </li>
          </GridItem>
        </ul>
      </Grid>
    </Product>
  </Connect(Product)>
</Provider>
`;
